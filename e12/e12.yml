Mappings:
  Instances:
    Settings:
      ImageId: 'ami-0128839b21d19300e'
      InstanceType: 't2.micro'
  Network:
    Settings:
      SubnetCidrBlock: '10.16.0.0/24'
      VpcCidrBlock: '10.16.0.0/16'
  Application:
    Settings:
      AvailabilityZone: 'us-east-1a'
      UniqueSuffix: 'e12'

Resources:
  #===== Logs
  HelloLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - 'hello-ecs-log-group-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== ECS
  HelloEcrHelloWorld:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: 'hello-ecr-hello-world'

  HelloCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub
        - 'hello-cluster-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
    
  HelloEcs:
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref HelloCluster
      # WARNING: Be careful, this will create log groups continuously.
      # Since /hello exits quickly, it will soon be started again.
      DesiredCount: 0
      LaunchType: 'EC2'
      ServiceName: !Sub
        - 'hello-ecs-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      TaskDefinition: !Ref HelloTask

  HelloTask:
    DependsOn: HelloLogGroup
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - Command: 
          - '/hello'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${HelloEcrHelloWorld}:latest'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options: 
              awslogs-group: !Ref HelloLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub
                - 'hello-task-stream-${UniqueSuffix}'
                - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
          Name: !Sub
            - 'hello-task-container-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
          StopTimeout: 10
      Cpu: 256
      ExecutionRoleArn: !GetAtt HelloRole.Arn
      Family: !Sub
        - 'hello-task-family-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Memory: 512
      Tags: 
        - Key: 'Name'
          Value: 'Hello Task'

  #===== Autoscaling
  HelloLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      IamInstanceProfile: 'arn:aws:iam::704560105568:instance-profile/ecsInstanceRole'
      IamInstanceProfile: !Ref HelloInstanceProfile
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      LaunchConfigurationName: !Sub
        - 'hello-lc-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SecurityGroups: 
        - !Ref HelloSg
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${HelloCluster} >> /etc/ecs/ecs.config;
          echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;

  HelloAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub
        - 'hello-asg-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      AvailabilityZones: 
        - !FindInMap [ Application, Settings, AvailabilityZone ]
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref HelloLaunchConfiguration
      MaxSize: 1
      MinSize: 0
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub
            - 'Hello Instance ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VPCZoneIdentifier:
        - !Ref HelloSubnet
  
  HelloScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref HelloAsg
      PolicyType: 'StepScaling'
      StepAdjustments: 
        - MetricIntervalLowerBound: 20
          ScalingAdjustment: 1
        - MetricIntervalUpperBound: 20
          ScalingAdjustment: -1

  #===== VPC
  HelloVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidrBlock ]
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello VPC ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
  
  HelloIgw:
    Type: AWS::EC2::InternetGateway
      
  HelloVpcIgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref HelloIgw 
      VpcId: !Ref HelloVpc

  HelloSg: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Open to IPv4 traffic'
      GroupName: !Sub
        - 'Hello SG ${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SecurityGroupIngress: 
        CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref HelloVpc

  #===== Subnet
  HelloSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetCidrBlock ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello Subnet ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  #===== Route Table
  HelloRt:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello RT ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  HelloRouteIPv4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref HelloIgw 
      RouteTableId: !Ref HelloRt   

  HelloRtAssociate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref HelloRt 
      SubnetId: !Ref HelloSubnet

  #===== IAM
  HelloRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'ec2.amazonaws.com'
              - 'ecs.amazonaws.com'
              - 'ecs-tasks.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      RoleName: !Sub
        - 'hello-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub
        - 'hello-instance-profile-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Roles: 
        - !Ref HelloRole