Mappings:
  Instances:
    Settings:
      ImageId: 'ami-04bf6dcdc9ab498ca'
      InstanceType: 't2.micro'
  Network:
    Settings:
      SubnetCidrBlock: '10.16.0.0/24'
      VpcCidrBlock: '10.16.0.0/16'
  Application:
    Settings:
      AvailabilityZone: 'us-east-1a'
      UniqueSuffix: 'e07'

Resources: 
  #===== Flow Logs
  HelloFlowLogVpc: 
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt HelloFlowLogRole.Arn
      LogGroupName: !Sub
        - 'hello-flow-log-group-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      ResourceId: !Ref HelloVpc 
      ResourceType: VPC
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello flow log VPC ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      TrafficType: ALL
  
  HelloFlowLogSubnet: 
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt HelloFlowLogRole.Arn
      LogGroupName: !Sub
        - 'hello-flow-log-group-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      ResourceId: !Ref HelloSubnet 
      ResourceType: Subnet
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello flow log subnet ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      TrafficType: ALL

  HelloFlowLogEni: 
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt HelloFlowLogRole.Arn
      LogGroupName: !Sub
        - 'hello-flow-log-group-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      ResourceId: !Ref HelloEni
      ResourceType: NetworkInterface
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello flow log ENI ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      TrafficType: ALL

  HelloFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub
        - 'hello-flow-log-group-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloFlowLogRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          Effect: 'Allow'
          Principal: 
            Service:
              - vpc-flow-logs.amazonaws.com
          Action: 
            - 'sts:AssumeRole'     
      Policies:
        - PolicyName: "hello-flow-log-policy"
          PolicyDocument: 
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Effect: 'Allow'
                Resource: "*"
      RoleName: !Sub
        - 'hello-flow-log-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== EC2 Instance
  HelloInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      IamInstanceProfile: !Ref HelloInstanceProfile
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      SubnetId: !Ref HelloSubnet 
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello Instance ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== IAM
  HelloRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'ec2.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      RoleName: !Sub
        - 'hello-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: 'hello-instance-profile'
      Roles: 
        - !Ref HelloRole

  HelloEni:
    Type: AWS::EC2::NetworkInterface
    Properties: 
      SecondaryPrivateIpAddressCount: 1
      SubnetId: !Ref HelloSubnet
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello ENI ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloEniAttach:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties: 
      DeviceIndex: 1
      InstanceId: !Ref HelloInstance
      NetworkInterfaceId: !Ref HelloEni

  #===== VPC
  HelloVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidrBlock ]
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello VPC ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
  
  HelloIgw:
    Type: AWS::EC2::InternetGateway
      
  HelloVpcIgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref HelloIgw 
      VpcId: !Ref HelloVpc

  #===== Subnet
  HelloSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetCidrBlock ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello subnet ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  #===== Route Table
  HelloRt:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: "Name"
          Value: !Sub
            - 'Hello RT ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  HelloRouteIPv4:
    Type: AWS::EC2::Route
    Properties:
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref HelloIgw 
        RouteTableId: !Ref HelloRt   
  
  HelloRtAssociate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref HelloRt 
      SubnetId: !Ref HelloSubnet
