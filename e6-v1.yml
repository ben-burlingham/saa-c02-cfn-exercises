Resources: 
  HelloStackNetwork: 
    Type : AWS::CloudFormation::Stack
    Properties:
      TemplateURL: 

  #===== VPC + IGW
  
  "Resources" : {
        "myStackWithParams" : {
  	       "Type" : "AWS::CloudFormation::Stack",
	       "Properties" : {
           must be s3
	           "TemplateURL" : "https://s3.amazonaws.com/cloudformation-templates-us-east-1/EC2ChooseAMI.template",
	           "Parameters" : {
	               "InstanceType" : "t2.micro",
	               "KeyName" : "mykey"
	           }
   	       }
        }
    }


#   #===== Subnet
#   HelloSubnet: 
#     DependsOn: HelloVpcCidrBlock
#     Type: AWS::EC2::Subnet
#     Properties: 
#         AssignIpv6AddressOnCreation: true
#         AvailabilityZone: 'us-east-1a'
#         CidrBlock:  !Select [ 0,  !Cidr [ !GetAtt HelloVpc.CidrBlock, 1, 8 ]]
#         Ipv6CidrBlock:  !Select [ 0,  !Cidr [ !Select [ 0,  !GetAtt HelloVpc.Ipv6CidrBlocks  ] , 1, 64 ] ]
#         Tags: 
#           - Key: 'Name'
#             Value: 'Hello IPV6 Subnet'
#         VpcId:  !Ref HelloVpc 
  
#   #===== Route Table
#   HelloRt:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       Tags:  
#         - Key: 'Name'
#           Value: 'Hello RT'
#       VpcId: !Ref HelloVpc
      
#   HelloRouteIPv4:
#     Type: AWS::EC2::Route
#     Properties:
#       DestinationCidrBlock: '0.0.0.0/0'
#       GatewayId: !Ref HelloIgw 
#       RouteTableId: !Ref HelloRt
    
#   HelloRtAssociate:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref HelloRt 
#       SubnetId: !Ref HelloSubnet
      

#  ################### V2
#   # EMPTY??

#   HelloVpcCidrBlock: 
#     Type: AWS::EC2::VPCCidrBlock
#     Properties: 
#         AmazonProvidedIpv6CidrBlock: true
#         VpcId: !Ref HelloVpc 
  
#   ##################### V3
  

#   HelloInstance: 
#     Type: AWS::EC2::Instance
#     Properties: 
#         AvailabilityZone: 'us-east-1a'
#         ImageId: 'ami-04bf6dcdc9ab498ca'
#         IamInstanceProfile: !Ref HelloInstanceProfile
#         InstanceType: 't2.micro'
#         SubnetId:  !Ref HelloSubnet 
#         Tags: 
#           - Key: 'Name' 
#             Value: 'Hello Instance'

#   #===== IAM
#   HelloRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Statement:
#           Effect: 'Allow'
#           Principal: 
#             Service: 
#               - 'ec2.amazonaws.com'
#           Action: 
#             - 'sts:AssumeRole'
#       Description: 'Hello Role'
#       ManagedPolicyArns: 
#         - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
#       RoleName: 'hello-role'

#   HelloInstanceProfile:
#     Type: AWS::IAM::InstanceProfile
#     Properties: 
#       InstanceProfileName: 'hello-instance-profile'
#       Roles: 
#         - !Ref HelloRole

#   ################# V4
#   HelloEigw: 
#     Type: AWS::EC2::EgressOnlyInternetGateway
#     Properties: 
#       VpcId:  !Ref HelloVpc 

#   HelloRouteEIGW: 
#     Type: AWS::EC2::Route
#     Properties: 
#       DestinationIpv6CidrBlock: ::/0
#       EgressOnlyInternetGatewayId:  !Ref HelloEigw 
#       RouteTableId:  !Ref HelloRt 
        
#   HelloEip: 
#     Type: AWS::EC2::EIP

#   HelloInstanceEipAssociate: 
#     Type: AWS::EC2::EIPAssociation
#     Properties: 
#       AllocationId: !GetAtt HelloEip.AllocationId
#       InstanceId: !Ref HelloInstance 
    