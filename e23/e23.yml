Parameters: 
  BucketSuffix: 
    AllowedPattern: ^[\d\w]{5,}$
    Type: String
    Description: Identifier to provide uniqueness on S3 buckets

Mappings:
  Application:
    Settings:
      UniqueSuffix: 'e23'

Resources:
  #===== CodeCommit
  HelloCommitRepo: 
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryName: !Sub
        - 'hello-commit-repo-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== CodeBuild
  HelloBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Location: !Ref HelloBucket
        Name: '/'
        Type: 'S3'
      Environment: 
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:2.0'
        ImagePullCredentialsType: 'CODEBUILD'
        Type: 'LINUX_CONTAINER'
      Name: !Sub
        - 'hello-build-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      QueuedTimeoutInMinutes: 5
      ServiceRole: !GetAtt HelloRoleCodeBuild.Arn
      Source: 
        GitCloneDepth: 1
        Location: !GetAtt HelloCommitRepo.CloneUrlHttp
        Type: 'CODECOMMIT'
      TimeoutInMinutes: 5

  #===== CodeDeploy
  HelloApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: !Sub
        - 'hello-deploy-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      ComputePlatform: 'Lambda'

  HelloDeploymentGroupLambda1:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref HelloApplication
      DeploymentConfigName: 'CodeDeployDefault.LambdaAllAtOnce'
      DeploymentGroupName: !Sub
        - 'hello-deployment-group-lambda-1-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL 
        DeploymentType: BLUE_GREEN
      ServiceRoleArn: !GetAtt HelloRoleCodeDeploy.Arn
  
  HelloDeploymentGroupLambda2:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref HelloApplication
      DeploymentConfigName: 'CodeDeployDefault.LambdaAllAtOnce'
      DeploymentGroupName: !Sub
        - 'hello-deployment-group-lambda-2-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL 
        DeploymentType: BLUE_GREEN
      ServiceRoleArn: !GetAtt HelloRoleCodeDeploy.Arn

  #===== CodePipeline
  HelloPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref HelloBucket
        Type: 'S3'
      Name: !Sub
        - 'hello-pipeline-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt HelloRoleCodePipeline.Arn
      Stages: 
        - Actions: 
            - ActionTypeId: 
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeCommit'
                Version: '1'
              Configuration:
                RepositoryName: !GetAtt HelloCommitRepo.Name
                BranchName: master
                OutputArtifactFormat: CODEBUILD_CLONE_REF
                PollForSourceChanges: 'false'
              Name: !Sub
                - 'hello-source-action-${UniqueSuffix}'
                - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
              OutputArtifacts:
                - Name: !Sub
                  - 'hello-source-output-artifact-${UniqueSuffix}'
                  - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
              RunOrder: 1
          Name: !Sub
            - 'hello-source-stage-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
        - Actions: 
            - ActionTypeId: 
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                PrimarySource: !Sub
                  - 'hello-source-output-artifact-${UniqueSuffix}'
                  - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
                ProjectName: !Ref HelloBuildProject
              InputArtifacts: 
                - Name: !Sub
                  - 'hello-source-output-artifact-${UniqueSuffix}'
                  - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
              Name: !Sub
                - 'hello-build-action-${UniqueSuffix}'
                - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
              OutputArtifacts:
                - Name: !Sub
                  - 'hello-build-output-artifact-${UniqueSuffix}'
                  - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
              RunOrder: 2
          Name: !Sub
            - 'hello-build-stage-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== Lambdas
  HelloLambda1: 
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = async (event, _) => { 
            return "Hello from Lambda 1 v1";
          }
      FunctionName: 'hello-lambda-1' 
      Handler: 'index.handler'
      Role: !GetAtt HelloRoleLambdaExecution.Arn
      Runtime: 'nodejs12.x'

  HelloLambda2: 
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = async (event, _) => { 
            return "Hello from Lambda 2 v1"; 
          }
      FunctionName: 'hello-lambda-2'
      Handler: 'index.handler'
      Role: !GetAtt HelloRoleLambdaExecution.Arn
      Runtime: 'nodejs12.x'

  #===== IAM
  HelloRoleCodeBuild:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'codebuild.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeCommitReadOnly'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
      RoleName: !Sub
        - 'hello-role-cb-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloRoleCodeDeploy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'codedeploy.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      RoleName: !Sub
        - 'hello-role-cd-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloRoleCodePipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'codepipeline.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AWSCodeCommitFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      Policies:
        - PolicyName: "hello-flow-log-policy"
          PolicyDocument: 
            Statement:
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: 'Allow'
                Resource: "*"
      RoleName: !Sub
        - 'hello-role-cp-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'lambda.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      RoleName: !Sub
        - 'hello-role-le-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== S3
  HelloBucket: 
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub
        - 'hello-bucket-${BucketSuffix}-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref HelloBucket
      PolicyDocument: 
        Statement: 
          Principal: '*'
          Action: '*'
          Effect: 'Allow'
          Resource: !Sub
            - arn:aws:s3:::${TargetBucketName}/*
            - TargetBucketName: !Ref HelloBucket
