Mappings:
  Instances:
    Settings:
      ImageId: 'ami-04bf6dcdc9ab498ca'
      InstanceType: 't2.micro'
  Application:
    Settings:
      AvailabilityZone: 'us-east-1a'
      UniqueSuffix: 'e21'

Resources:
  #===== EC2
  HelloSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties: 
      SpotFleetRequestConfigData: 
        AllocationStrategy: 'lowestPrice'
        IamFleetRole: !GetAtt HelloRole.Arn
        LaunchTemplateConfigs: 
          - LaunchTemplateSpecification: 
              LaunchTemplateId: !Ref HelloLaunchTemplate
              Version: 1
        ReplaceUnhealthyInstances: true
        TargetCapacity: 2
        TerminateInstancesWithExpiration: true
        Type: 'maintain'

  HelloLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub
        - 'hello-lt-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      LaunchTemplateData: 
        IamInstanceProfile: 
          Arn: !GetAtt HelloInstanceProfile.Arn
        ImageId: !FindInMap [ Instances, Settings, ImageId ]
        InstanceType: !FindInMap [ Instances, Settings, InstanceType ]

  #===== Kinesis
  HelloStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: !Sub
        - 'hello-stream-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      ShardCount: 1

  #===== Event bridge
  HelloRuleA:
    Type: AWS::Events::Rule
    Properties: 
      Description: "EC2 instance state events to Kinesis."
      EventPattern: |
        {
          "source": [
            "aws.ec2spotfleet"
          ]
        }
      Name: !Sub
        - 'hello-rule-A-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      State: 'ENABLED'
      Targets: 
        - Arn: !GetAtt HelloStream.Arn
          Id: !Sub
            - 'hello-rule-A-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
          RoleArn: !GetAtt HelloRole.Arn

  HelloRuleB:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Scheduled call to step function."
      Name: !Sub
        - 'hello-rule-B-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      ScheduleExpression: 'rate(1 minute)'
      State: 'ENABLED'
      Targets: 
        - Arn: !GetAtt HelloStateMachine.Arn
          Id: !Sub
            - 'hello-rule-B-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
          RoleArn: !GetAtt HelloRole.Arn

  #===== State machine
  HelloStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionString: !Sub |
        {
          "StartAt": "State0",
          "States": {
            "State0": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${HelloLambda0}",
              "Next": "State1"
            },
            "State1": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${HelloLambda1}",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt HelloRole.Arn
      StateMachineName: !Sub
        - 'hello-state-machine-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== Lambda
  HelloLambda0:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = async (evt, ctx) => { 
            console.log("Hello Lambda 0");
            return "Hello Lambda 0" 
          }
      FunctionName: !Sub
        - 'hello-lambda0-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Handler: 'index.handler'
      Role: !GetAtt HelloRole.Arn
      Runtime: 'nodejs12.x'
  
  HelloLambda1:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = async (evt, ctx) => { 
            console.log("Hello Lambda 1");
            return "Hello Lambda 1" 
          }
      FunctionName: !Sub
        - 'hello-lambda1-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Handler: 'index.handler'
      Role: !GetAtt HelloRole.Arn
      Runtime: 'nodejs12.x'

  #===== IAM
  HelloRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'ec2.amazonaws.com'
              - 'events.amazonaws.com'
              - 'lambda.amazonaws.com'
              - 'spot.amazonaws.com'
              - 'spotfleet.amazonaws.com'
              - 'states.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
      RoleName: !Sub
        - 'hello-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub
        - 'hello-instance-profile-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Roles: 
        - !Ref HelloRole