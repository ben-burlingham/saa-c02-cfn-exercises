Mappings:
  Instances:
    Settings:
      ImageId: 'ami-04bf6dcdc9ab498ca'
      InstanceType: 't2.micro'
  Network:
    Settings:
      SubnetCidrBlock0: '10.16.0.0/24'
      VpcCidrBlock: '10.16.0.0/16'
  Application:
    Settings:
      AvailabilityZone: 'us-east-1a'
      UniqueSuffix: 'e14'

Resources:
  #===== EC2
  HelloInstanceA: 
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      IamInstanceProfile: !Ref HelloInstanceProfile
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      SecurityGroupIds:
        - !Ref HelloSg
      SubnetId: !Ref HelloSubnet 
      Tags: 
        - Key: 'Name'
          Value: 'Hello Instance A'
  
  HelloInstanceB: 
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      IamInstanceProfile: !Ref HelloInstanceProfile
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      SecurityGroupIds:
        - !Ref HelloSg
      SubnetId: !Ref HelloSubnet 
      Tags: 
        - Key: 'Name'
          Value: 'Hello Instance B'

  #===== IAM
  HelloRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'ec2.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      RoleName: !Sub
        - 'hello-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub
        - 'hello-instance-profile-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Roles: 
        - !Ref HelloRole

  #===== Network load balancer
  HelloNlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub
        - 'hello-nlb-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Subnets:
        - !Ref HelloSubnet
      Type: 'network'

  HelloNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref HelloNlbGroup
          Type: 'forward'
      LoadBalancerArn: !Ref HelloNlb
      Port: 80
      Protocol: 'TCP'

  HelloNlbListener3000:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref HelloNlbGroup
          Type: 'forward'
      LoadBalancerArn: !Ref HelloNlb
      Port: 3000
      Protocol: 'TCP'

  HelloNlbGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Sub
        - 'hello-nlb-group-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Port: 80
      Protocol: 'TCP'
      Targets: 
        - Id: !Ref HelloInstanceA
        - Id: !Ref HelloInstanceB
      VpcId: !Ref HelloVpc

  #====== Network
  HelloVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidrBlock ]
      Tags:
        - Key: 'Name'
          Value: !Sub
            - 'Hello VPC ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
  
  HelloIgw:
    Type: AWS::EC2::InternetGateway
      
  HelloVpcIgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref HelloIgw 
      VpcId: !Ref HelloVpc

  HelloSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetCidrBlock0 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub
            - 'Hello subnet ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  HelloSg: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Open to IPv4 traffic'
      GroupName: !Sub
        - 'Hello SG ${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SecurityGroupIngress: 
        CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref HelloVpc 

  #===== Route table
  HelloRt:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello RT ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  HelloRouteIPv4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref HelloIgw 
      RouteTableId: !Ref HelloRt   

  HelloRtAssociate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref HelloRt 
      SubnetId: !Ref HelloSubnet