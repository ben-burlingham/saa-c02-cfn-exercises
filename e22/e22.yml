Mappings:
  Instances:
    Settings:
      ImageId: 'ami-04bf6dcdc9ab498ca'
      InstanceType: 't2.micro'
  Network:
    Settings:
      SubnetCidrBlockA: '10.16.0.0/24'
      SubnetCidrBlockB: '10.16.1.0/24'
      VpcCidrBlock: '10.16.0.0/16'
  Application:
    Settings:
      AvailabilityZoneA: 'us-east-1a'
      AvailabilityZoneB: 'us-east-1b'
      UniqueSuffix: 'e22'

Resources:
  #===== DynamoDB
  HelloDdbTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: 'id'
          AttributeType: 'N'
        - AttributeName: 'guid'
          AttributeType: 'S'
        - AttributeName: 'author'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      GlobalSecondaryIndexes:
        - IndexName: !Sub
            - 'hello-gsi-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
          KeySchema: 
            - AttributeName: 'author'
              KeyType: 'HASH'
          Projection: 
            NonKeyAttributes: 
              - 'content'
              - 'title'
            ProjectionType: 'INCLUDE'
      LocalSecondaryIndexes:
        - IndexName: !Sub
            - 'hello-lsi-${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
          KeySchema: 
            - AttributeName: 'id'
              KeyType: 'HASH'
            - AttributeName: 'author'
              KeyType: 'RANGE'
          Projection: 
            ProjectionType: 'KEYS_ONLY'
      KeySchema: 
        - AttributeName: 'id'
          KeyType: 'HASH'
        - AttributeName: 'guid'
          KeyType: 'RANGE'
      StreamSpecification: 
          StreamViewType: 'KEYS_ONLY'
      TableName: !Sub
        - 'hello-ddb-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
  
  HelloDax:
    Type: AWS::DAX::Cluster
    Properties: 
      AvailabilityZones: 
        - !FindInMap [ Application, Settings, AvailabilityZoneA ]
      ClusterName: !Sub
        - 'hello-dax-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      IAMRoleARN: !GetAtt HelloRoleDax.Arn
      NodeType: 'dax.t2.small'
      ReplicationFactor: 1
      SecurityGroupIds:
        - !Ref HelloSecurityGroup
      SubnetGroupName: !Ref HelloSubnetGroup

  #===== Lambda
  HelloEventSource:
    DependsOn: HelloDdbTable
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt HelloDdbTable.StreamArn
      FunctionName: !Ref HelloLambda
      StartingPosition: 'LATEST'

  HelloLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = (event, _) => { 
            console.log("DDB EVENT", event);
            return 0;
          }
      FunctionName: !Sub
        - 'hello-lambda-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Handler: 'index.handler'
      Role: !GetAtt HelloRoleLambdaExecution.Arn
      Runtime: 'nodejs12.x'

  #===== IAM
  HelloRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'lambda.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
      RoleName: !Sub
        - 'hello-role-le-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloRoleDax:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'dax.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      RoleName: !Sub
        - 'hello-role-dax-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloRoleEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'ec2.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      RoleName: !Sub
        - 'hello-role-ec2-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub
        - 'hello-ip-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Roles: 
        - !Ref HelloRoleEC2

  #===== VPC
  HelloVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidrBlock ]
      Tags:
        - Key: 'Name'
          Value: !Sub
            - 'Hello VPC ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloIgw:
    Type: AWS::EC2::InternetGateway

  HelloVpcIgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref HelloIgw 
      VpcId: !Ref HelloVpc

  HelloSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Open to IPv4 traffic'
      GroupName: !Sub
        - 'Hello SG ${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SecurityGroupIngress: 
        CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref HelloVpc

  #===== Subnet
  HelloSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZoneA ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetCidrBlockA ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub
            - 'Hello subnet ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  HelloSubnetGroup:
    Type: AWS::DAX::SubnetGroup
    Properties: 
      Description: "Subnet group for DAX"
      SubnetGroupName: !Sub
        - 'hello-sg-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SubnetIds: 
        - !Ref HelloSubnet

  #==== RT
  HelloRt:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello RT ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc

  HelloRouteIPv4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref HelloIgw 
      RouteTableId: !Ref HelloRt 

  HelloRtAssociate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref HelloRt
      SubnetId: !Ref HelloSubnet

  #===== EC2
  HelloInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref HelloInstanceProfile
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      SecurityGroupIds:
        - !Ref HelloSecurityGroup
      SubnetId: !Ref HelloSubnet
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello Instance ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]