Mappings:
  Application:
    Settings:
      UniqueSuffix: 'e17'

Resources:
  #===== SQS
  HelloQueue:
    Type: AWS::SQS::Queue
    Properties: 
      MessageRetentionPeriod: 60
      QueueName: !Sub
        - 'hello-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloQueuePolicySNS:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      PolicyDocument:
        Statement:
          Action: 
            - "SQS:SendMessage" 
            - "SQS:ReceiveMessage"
          Effect: "Allow"
          Resource: !GetAtt HelloQueue.Arn
          Principal:  
            Service: 
              - 'sns.amazonaws.com'
      Queues: 
        - !Ref HelloQueue

  #===== SNS
  HelloTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !GetAtt HelloQueue.Arn
          Protocol: 'sqs'
        - Endpoint: !GetAtt HelloLambdaSNS.Arn
          Protocol: 'lambda'
      TopicName: !Sub
        - 'hello-topic-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== Lambdas
  HelloLambdaSQS:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = (event, _) => { 
            console.log("SQS EVENT", event);
          }
      FunctionName: !Sub
        - 'hello-lambda-sqs-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Handler: 'index.handler'
      Role: !GetAtt HelloRole.Arn
      Runtime: 'nodejs12.x'

  HelloLambdaSNS:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = (event, _) => { 
            console.log("SNS EVENT", event);
            console.log("SNS EVENT RECORD COUNT", event.Records.length);
            event.Records.map(console.log);
          }
      FunctionName: !Sub
        - 'hello-lambda-sns-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      Handler: 'index.handler'
      Role: !GetAtt HelloRole.Arn
      Runtime: 'nodejs12.x'

  HelloEventSourceSQS:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 2
      Enabled: true
      EventSourceArn: !GetAtt HelloQueue.Arn
      FunctionName: !Ref HelloLambdaSQS

  HelloLambdaPermissionSNS:
    DependsOn:
      - HelloLambdaSNS
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloLambdaSNS
      Principal: 'sns.amazonaws.com'

  #===== IAM
  HelloRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: 'Allow'
          Principal: 
            Service: 
              - 'lambda.amazonaws.com'
          Action: 
            - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      RoleName: !Sub
        - 'hello-role-${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]