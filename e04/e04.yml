Parameters: 
  KeyPairName:
    Type: String
    Description: Name of key pair to use for instance SSH

Mappings:
  Instances:
    Settings:
      ImageId: 'ami-04bf6dcdc9ab498ca'
      InstanceType: 't2.micro'
  Network:
    Settings:
      SubnetCidrBlockPublic: '10.16.0.0/24'
      SubnetCidrBlockPrivate: '10.16.1.0/24'
      VpcCidrBlock: '10.16.0.0/16'
  Application:
    Settings:
      AvailabilityZone: 'us-east-1a'
      UniqueSuffix: 'e04'

Resources: 
  #===== EC2
  HelloInstanceBastion: 
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      KeyName: !Ref KeyPairName
      SecurityGroupIds: 
        - !GetAtt HelloSgBastion.GroupId 
      SubnetId: !Ref HelloSubnetPublic
      Tags: 
        - Key: 'Name'
          Value: !Sub
            - 'Hello Instance Bastion ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
        
  HelloInstancePrivate: 
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !FindInMap [ Application, Settings, AvailabilityZone ]
      ImageId: !FindInMap [ Instances, Settings, ImageId ]
      InstanceType: !FindInMap [ Instances, Settings, InstanceType ]
      KeyName: !Ref KeyPairName
      SecurityGroupIds: 
        - !GetAtt HelloSgPrivate.GroupId 
      SubnetId: !Ref HelloSubnetPrivate 
      Tags: 
        - Key: 'Name' 
          Value: !Sub
            - 'Hello Instance Private ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  #===== Security groups
  HelloSgBastion: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Open to public SSH traffic'
      GroupName: !Sub
        - 'Hello SG Bastion ${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SecurityGroupIngress: 
        CidrIp: '0.0.0.0/0'
        FromPort: 22
        IpProtocol: 'tcp'
        ToPort: 22
      VpcId: !Ref HelloVpc 
        
  HelloSgPrivate: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Restricts ingress traffic to only SSH from Bastion'
      GroupName: !Sub
        - 'Hello SG Private ${UniqueSuffix}'
        - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      SecurityGroupIngress: 
        CidrIp: !Sub ${HelloInstanceBastion.PrivateIp}/32
        FromPort: 22
        IpProtocol: 'tcp'
        ToPort: 22
      VpcId: !Ref HelloVpc 

  #===== VPC, IGW
  HelloVpc: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [ Network, Settings, VpcCidrBlock ]
      EnableDnsHostnames: false
      EnableDnsSupport: false
      Tags: 
        - Key: 'Name' 
          Value: !Sub
            - 'Hello VPC ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]

  HelloIgw: 
    Type: AWS::EC2::InternetGateway

  HelloVpcAttach: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref HelloIgw 
      VpcId: !Ref HelloVpc 
  
  #===== Subnets
  HelloSubnetPrivate: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 'us-east-1a'
      CidrBlock: !FindInMap [ Network, Settings, SubnetCidrBlockPrivate ]
      Tags: 
        - Key: 'Name' 
          Value: !Sub
          - 'Hello Subnet Private ${UniqueSuffix}'
          - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc 
        
  HelloSubnetPublic: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 'us-east-1a'
      CidrBlock: !FindInMap [ Network, Settings, SubnetCidrBlockPublic ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: 'Name' 
          Value: !Sub
            - 'Hello Subnet Public ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc 

  #===== Route table
  HelloRoute: 
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref HelloIgw 
      RouteTableId: !Ref HelloRouteTable 
        
  HelloRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: 'Name' 
          Value: !Sub
            - 'Hello RT ${UniqueSuffix}'
            - UniqueSuffix: !FindInMap [ Application, Settings, UniqueSuffix ]
      VpcId: !Ref HelloVpc 
      
  HelloRouteTableAssociate: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
        RouteTableId: !Ref HelloRouteTable 
        SubnetId: !Ref HelloSubnetPublic 

  